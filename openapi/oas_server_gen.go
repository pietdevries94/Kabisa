// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateNewQuoteGame implements createNewQuoteGame operation.
	//
	// The quote game returns three quotes and three authors. In `PUT /quote-game/:id`, the player can
	// respond with their answer. There is a deadline of five minutes.
	//
	// POST /quote-game
	CreateNewQuoteGame(ctx context.Context) (CreateNewQuoteGameRes, error)
	// GetRandomQuote implements getRandomQuote operation.
	//
	// Returns a random quote.
	//
	// GET /quote
	GetRandomQuote(ctx context.Context) (GetRandomQuoteRes, error)
	// SubmitAnswerForQuoteGame implements submitAnswerForQuoteGame operation.
	//
	// This request expects an answer from the user and will return if the answer was correct and what
	// the correct answer should be.
	//
	// POST /quote-game/{id}/answer
	SubmitAnswerForQuoteGame(ctx context.Context, req []QuoteGameAnswer, params SubmitAnswerForQuoteGameParams) (SubmitAnswerForQuoteGameRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
